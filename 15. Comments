#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <ctype.h>

#define PROMPT "$ "

typedef struct command_t {
  char *argv[1024];
  int argc;
} command_t;

void preprocess_command(char *command_line) {
  // Skip comments
  char *comment_start = strchr(command_line, '#');
  if (comment_start != NULL) {
    *comment_start = '\0'; // Terminate the command line at the comment
  }
}

int execute_command(command_t *command) {
  if (command->argc == 0) {
    return 0;
  }

  char *path = getenv("PATH");

  // Iterate over the PATH variable, looking for the executable.
  char *executable = strtok(path, ":");
  while (executable != NULL) {
    char full_path[1024];
    snprintf(full_path, sizeof(full_path), "%s/%s", executable, command->argv[0]);

    if (access(full_path, X_OK) == 0) {
      // The executable has been found.
      execve(full_path, command->argv, environ);
      break;
    }

    executable = strtok(NULL, ":");
  }

  // If the executable was not found, print an error message.
  if (executable == NULL) {
    fprintf(stderr, "Command '%s' not found.\n", command->argv[0]);
    return 1;
  }

  return 0;
}

int main() {
  char command_line[1024];
  char *token;

  while (1) {
    // Display the prompt and wait for the user to type a command.
    printf(PROMPT);
    fflush(stdout);
    fgets(command_line, sizeof(command_line), stdin);

    // Preprocess the command line (handle comments)
    preprocess_command(command_line);

    // Split the command line into tokens.
    token = strtok(command_line, " \t\n");

    while (token != NULL) {
      // Parse the current token into a command structure.
      command_t command;
      command.argc = 0;

      do {
        command.argv[command.argc++] = token;
        token = strtok(NULL, " \t\n");
      } while (token != NULL && command.argc < 102
