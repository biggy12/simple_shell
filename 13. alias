#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <ctype.h>

#define PROMPT "$ "

typedef struct command_t {
  char *argv[1024];
  int argc;
} command_t;

// Define a struct to store alias information
typedef struct alias_t {
  char *name;
  char *value;
  struct alias_t *next;
} alias_t;

alias_t *alias_head = NULL;

void add_alias(const char *name, const char *value) {
  // Check if the alias already exists
  alias_t *current = alias_head;
  while (current != NULL) {
    if (strcmp(current->name, name) == 0) {
      // Replace the existing value with the new value
      free(current->value);
      current->value = strdup(value);
      return;
    }

    current = current->next;
  }

  // Create a new alias entry
  alias_t *new_alias = malloc(sizeof(alias_t));
  if (new_alias == NULL) {
    perror("malloc");
    exit(EXIT_FAILURE);
  }

  new_alias->name = strdup(name);
  if (new_alias->name == NULL) {
    perror("strdup");
    exit(EXIT_FAILURE);
  }

  new_alias->value = strdup(value);
  if (new_alias->value == NULL) {
    perror("strdup");
    exit(EXIT_FAILURE);
  }

  new_alias->next = alias_head;
  alias_head = new_alias;
}

void print_aliases() {
  alias_t *current = alias_head;
  while (current != NULL) {
    printf("%s='%s'\n", current->name, current->value);
    current = current->next;
  }
}

void delete_alias(const char *name) {
  alias_t *previous = NULL;
  alias_t *current = alias_head;

  while (current != NULL) {
    if (strcmp(current->name, name) == 0) {
      // Remove the alias from the list
      if (previous == NULL) {
        alias_head = current->next;
      } else {
        previous->next = current->next;
      }

      free(current->name);
      free(current->value);
      free(current);
      break;
    }

    previous = current;
    current = current->next;
  }
}

void handle_alias_command(command_t *command) {
  if (command->argc == 1) {
    // Print a list of all aliases
    print_aliases();
  } else if (command->argc == 2) {
    // Print the value of the specified alias
    const char *alias_name = command->argv[1];
    alias_t *current = alias_head;

    while (current != NULL) {
      if (strcmp(current->name, alias_name) == 0) {
        printf("%s='%s'\n", current->name, current->value);
        break;
      }

      current = current->next;
    }

    if (current == NULL) {
      fprintf(stderr, "Alias '%s' not found.\n", alias_name);
    }
  } else {
    // Define one or more aliases
    for (int i = 1; i < command->argc; i++) {
      char *alias_definition = command->argv[i];

      // Split the alias definition into name and value
      char *name = strtok(alias_definition, "=");
      if (name == NULL) {
        fprintf(stderr, "Invalid alias definition: '%s'\n", alias_definition
