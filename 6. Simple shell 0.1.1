#include <stdio.h>
#include <stdlib.h>

static char *buffer;
static size_t buffer_size;
static size_t buffer_pos;

char *getline() {
  // Check if the buffer has been initialized.
  if (buffer == NULL) {
    buffer_size = 1024;
    buffer = malloc(buffer_size);
    if (buffer == NULL) {
      return NULL;
    }
    buffer_pos = 0;
  }

  // Read characters from the buffer until a newline character is found.
  char *line = NULL;
  size_t line_size = 0;
  while (buffer_pos < buffer_size) {
    char c = buffer[buffer_pos];
    buffer_pos++;

    // If a newline character is found, break the loop.
    if (c == '\n') {
      break;
    }

    // Reallocate the line buffer if necessary.
    if (line_size == 0) {
      line_size = 1024;
      line = malloc(line_size);
      if (line == NULL) {
        return NULL;
      }
    }

    // If the line buffer is full, reallocate it.
    if (line_size == buffer_pos) {
      line_size *= 2;
      line = realloc(line, line_size);
      if (line == NULL) {
        return NULL;
      }
    }

    // Add the character to the line buffer.
    line[line_size - 1] = c;
  }

  // If the buffer is empty, read more characters from the standard input.
  if (buffer_pos == buffer_size) {
    buffer_size *= 2;
    buffer = realloc(buffer, buffer_size);
    if (buffer == NULL) {
      return NULL;
    }

    buffer_pos = 0;
    size_t bytes_read = read(STDIN_FILENO, buffer, buffer_size);
    if (bytes_read < 0) {
      return NULL;
    }

    // If no characters were read, return NULL.
    if (bytes_read == 0) {
      return NULL;
    }
  }

  // Add a null terminator to the end of the line buffer.
  line[line_size - 1] = '\0';

  // Return the line buffer.
  return line;
}

char *line;

while ((line = getline()) != NULL) {
  printf("%s\n", line);
  free(line);
}
